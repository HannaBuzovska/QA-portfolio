MySQL Create Tables:


1. Write a SQL statement to create a simple table countries including columns country_id,country_name and region_id

CREATE TABLE countries( 
COUNTRY_ID varchar(2),
COUNTRY_NAME varchar(40),
REGION_ID decimal(10,0)
);

Here is the structure of the table:

mysql> DESC countries;
+--------------+---------------+------+-----+---------+-------+
| Field        | Type          | Null | Key | Default | Extra |
+--------------+---------------+------+-----+---------+-------+
| COUNTRY_ID   | varchar(2)    | YES  |     | NULL    |       |
| COUNTRY_NAME | varchar(40)   | YES  |     | NULL    |       |
| REGION_ID    | decimal(10,0) | YES  |     | NULL    |       |
+--------------+---------------+------+-----+---------+-------+
3 rows in set (0.01 sec)



------------------------------------------------------------------------------------------------------------------
2. Write a SQL statement to create a simple table countries including columns country_id,country_name and region_id which is already exists.

CREATE TABLE IF NOT EXISTS countries ( 
COUNTRY_ID varchar(2),
COUNTRY_NAME varchar(40),
REGION_ID decimal(10,0)
);

Here is the structure of the table:

mysql> DESC countries;
+--------------+---------------+------+-----+---------+-------+
| Field        | Type          | Null | Key | Default | Extra |
+--------------+---------------+------+-----+---------+-------+
| COUNTRY_ID   | varchar(2)    | YES  |     | NULL    |       |
| COUNTRY_NAME | varchar(40)   | YES  |     | NULL    |       |
| REGION_ID    | decimal(10,0) | YES  |     | NULL    |       |
+--------------+---------------+------+-----+---------+-------+
3 rows in set (0.13 sec)



------------------------------------------------------------------------------------------------------------------
3. Write a SQL statement to create a duplicate copy of countries table including structure and data by name dup_countries.

CREATE TABLE IF NOT EXISTS dup_countries
AS SELECT * FROM  countries;

Here is the structure of the table:

mysql> DESC dup_countries;
+--------------+---------------+------+-----+---------+-------+
| Field        | Type          | Null | Key | Default | Extra |
+--------------+---------------+------+-----+---------+-------+
| COUNTRY_ID   | varchar(2)    | YES  |     | NULL    |       |
| COUNTRY_NAME | varchar(40)   | YES  |     | NULL    |       |
| REGION_ID    | decimal(10,0) | YES  |     | NULL    |       |
+--------------+---------------+------+-----+---------+-------+
3 rows in set (0.11 sec)



------------------------------------------------------------------------------------------------------------------
4. Write a SQL statement to create a table countries set a constraint NOT NULL.

CREATE TABLE IF NOT EXISTS countries ( 
COUNTRY_ID varchar(2) NOT NULL,
COUNTRY_NAME varchar(40) NOT NULL,
REGION_ID decimal(10,0) NOT NULL
);

Here is the structure of the table:

mysql> desc countries;
+--------------+---------------+------+-----+---------+-------+
| Field        | Type          | Null | Key | Default | Extra |
+--------------+---------------+------+-----+---------+-------+
| COUNTRY_ID   | varchar(2)    | NO   |     | NULL    |       |
| COUNTRY_NAME | varchar(40)   | NO   |     | NULL    |       |
| REGION_ID    | decimal(10,0) | NO   |     | NULL    |       |
+--------------+---------------+------+-----+---------+-------+
3 rows in set (0.00 sec)

mysql> 



------------------------------------------------------------------------------------------------------------------
5. Write a SQL statement to create a table named countries including columns country_id, country_name and region_id and make sure that no countries except Italy, India and China will be entered in the table.

CREATE TABLE IF NOT EXISTS countries ( 
COUNTRY_ID varchar(2),
COUNTRY_NAME varchar(40)
CHECK(COUNTRY_NAME IN('Italy','India','China')) ,
REGION_ID decimal(10,0)
);

Here is the structure of the table:

mysql> DESC countries;
+--------------+---------------+------+-----+---------+-------+
| Field        | Type          | Null | Key | Default | Extra |
+--------------+---------------+------+-----+---------+-------+
| COUNTRY_ID   | varchar(2)    | YES  |     | NULL    |       |
| COUNTRY_NAME | varchar(40)   | YES  |     | NULL    |       |
| REGION_ID    | decimal(10,0) | YES  |     | NULL    |       |
+--------------+---------------+------+-----+---------+-------+
3 rows in set (0.01 sec)



------------------------------------------------------------------------------------------------------------------
6. Write a SQL statement to create a table named countries including columns country_id,country_name and region_id and make sure that no duplicate data against column country_id will be allowed at the time of insertion.

CREATE TABLE IF NOT EXISTS countries ( 
COUNTRY_ID varchar(2) NOT NULL,
COUNTRY_NAME varchar(40) NOT NULL,
REGION_ID decimal(10,0) NOT NULL,
UNIQUE(COUNTRY_ID)
);

Here is the structure of the table:

mysql> DESC countries;
+--------------+---------------+------+-----+---------+-------+
| Field        | Type          | Null | Key | Default | Extra |
+--------------+---------------+------+-----+---------+-------+
| COUNTRY_ID   | varchar(2)    | YES  |     | NULL    |       |
| COUNTRY_NAME | varchar(40)   | YES  |     | NULL    |       |
| REGION_ID    | decimal(10,0) | YES  |     | NULL    |       |
+--------------+---------------+------+-----+---------+-------+
3 rows in set (0.01 sec)



------------------------------------------------------------------------------------------------------------------
7. Write a SQL statement to create a table named jobs including columns job_id, job_title, min_salary and max_salary, and make sure that, the default value for job_title is blank and min_salary is 8000 and max_salary is NULL will be entered automatically at the time of insertion if no value assigned for the specified columns.

CREATE TABLE IF NOT EXISTS jobs ( 
JOB_ID varchar(10) NOT NULL UNIQUE, 
JOB_TITLE varchar(35) NOT NULL DEFAULT ' ', 
MIN_SALARY decimal(6,0) DEFAULT 8000, 
MAX_SALARY decimal(6,0) DEFAULT NULL
);

Here is the structure of the table:

mysql> DESC jobs;
+------------+--------------+------+-----+---------+-------+
| Field      | Type         | Null | Key | Default | Extra |
+------------+--------------+------+-----+---------+-------+
| JOB_ID     | varchar(10)  | NO   | PRI | NULL    |       |
| JOB_TITLE  | varchar(35)  | NO   |     |         |       |
| MIN_SALARY | decimal(6,0) | YES  |     | 8000    |       |
| MAX_SALARY | decimal(6,0) | YES  |     | NULL    |       |
+------------+--------------+------+-----+---------+-------+
4 rows in set (0.01 sec)
------------------------------------------------------------------------------------------------------------------




MySQL Insert Rows into the Table:


1. Write a SQL statement to insert a record with your own value into the table countries against each columns.
Here in the following is the structure of the table countries.
+--------------+---------------+------+-----+---------+-------+
| Field        | Type          | Null | Key | Default | Extra |
+--------------+---------------+------+-----+---------+-------+
| COUNTRY_ID   | varchar(2)    | YES  |     | NULL    |       |
| COUNTRY_NAME | varchar(40)   | YES  |     | NULL    |       |
| REGION_ID    | decimal(10,0) | YES  |     | NULL    |       |
+--------------+---------------+------+-----+---------+-------+	

INSERT INTO countries VALUES('C1','India',1001);

Here is the structure of the table:

mysql> SELECT * FROM countries;
+------------+--------------+-----------+
| COUNTRY_ID | COUNTRY_NAME | REGION_ID |
+------------+--------------+-----------+
| C1         | India        |      1001 |
+------------+--------------+-----------+
1 row in set (0.00 sec)



------------------------------------------------------------------------------------------------------------------
2. Write a SQL statement to insert one row into the table countries against the column country_id and country_name.
Here in the following is the structure of the table countries.
+--------------+---------------+------+-----+---------+-------+
| Field        | Type          | Null | Key | Default | Extra |
+--------------+---------------+------+-----+---------+-------+
| COUNTRY_ID   | varchar(2)    | YES  |     | NULL    |       |
| COUNTRY_NAME | varchar(40)   | YES  |     | NULL    |       |
| REGION_ID    | decimal(10,0) | YES  |     | NULL    |       |
+--------------+---------------+------+-----+---------+-------+	

INSERT INTO countries (country_id,country_name) VALUES('C1','India');

Here is the structure of the table:

mysql> SELECT * FROM countries;
+------------+--------------+-----------+
| COUNTRY_ID | COUNTRY_NAME | REGION_ID |
+------------+--------------+-----------+
| C1         | India        |      NULL |
+------------+--------------+-----------+
1 row in set (0.00 sec)



------------------------------------------------------------------------------------------------------------------
3. Write a SQL statement to create duplicate of countries table named country_new with all structure and data.
Here in the following is the structure of the table countries.
+--------------+---------------+------+-----+---------+-------+
| Field        | Type          | Null | Key | Default | Extra |
+--------------+---------------+------+-----+---------+-------+
| COUNTRY_ID   | varchar(2)    | YES  |     | NULL    |       |
| COUNTRY_NAME | varchar(40)   | YES  |     | NULL    |       |
| REGION_ID    | decimal(10,0) | YES  |     | NULL    |       |
+--------------+---------------+------+-----+---------+-------+	

CREATE TABLE IF NOT EXISTS country_new
AS SELECT * FROM countries;

Here is the structure of the table:

mysql> SHOW COLUMNS FROM country_new;
+--------------+---------------+------+-----+---------+-------+
| Field        | Type          | Null | Key | Default | Extra |
+--------------+---------------+------+-----+---------+-------+
| COUNTRY_ID   | varchar(8)    | YES  |     | NULL    |       |
| COUNTRY_NAME | varchar(40)   | YES  |     | NULL    |       |
| REGION_ID    | decimal(10,0) | YES  |     | NULL    |       |
+--------------+---------------+------+-----+---------+-------+
3 rows in set (0.00 sec)

mysql> SELECT * FROM country_new;
+------------+--------------+-----------+
| COUNTRY_ID | COUNTRY_NAME | REGION_ID |
+------------+--------------+-----------+
| C1         | India        |      1001 |
+------------+--------------+-----------+
1 row in set (0.00 sec)



------------------------------------------------------------------------------------------------------------------
4. Write a SQL statement to insert NULL values against region_id column for a row of countries table.

INSERT INTO countries (country_id,country_name,region_id) VALUES('C1','India',NULL);

Here is the structure of the table:

mysql> SELECT * FROM countries;
+------------+--------------+-----------+
| COUNTRY_ID | COUNTRY_NAME | REGION_ID |
+------------+--------------+-----------+
| C1         | India        |      NULL |
+------------+--------------+-----------+
1 row in set (0.00 sec)



------------------------------------------------------------------------------------------------------------------
5. Write a SQL statement to insert 3 rows by a single insert statement.

INSERT INTO countries VALUES('C0001','India',1001),
('C0002','USA',1007),('C0003','UK',1003);

Here is the structure of the table:

mysql> SELECT * FROM COUNTRIES;
+------------+--------------+-----------+
| COUNTRY_ID | COUNTRY_NAME | REGION_ID |
+------------+--------------+-----------+
| C0001      | India        |      1001 |
| C0002      | USA          |      1007 |
| C0003      | UK           |      1003 |
+------------+--------------+-----------+
3 rows in set (0.00 sec)



------------------------------------------------------------------------------------------------------------------
6. Write a SQL statement to insert one row in jobs table to ensure that no duplicate value will be entered in the job_id column.
Create the table jobs.

CREATE TABLE IF NOT EXISTS jobs ( 
JOB_ID integer NOT NULL UNIQUE , 
JOB_TITLE varchar(35) NOT NULL, 
MIN_SALARY decimal(6,0)
);

INSERT INTO jobs VALUES(1001,'OFFICER',8000);

mysql> SELECT * FROM jobs;
+--------+-----------+------------+
| JOB_ID | JOB_TITLE | MIN_SALARY |
+--------+-----------+------------+
|   1001 | OFFICER   |       8000 |
+--------+-----------+------------+
Solution:

INSERT INTO jobs VALUES(1001,'OFFICER',8000);

mysql> INSERT INTO jobs VALUES(1001,'OFFICER',8000);
ERROR 1062 (23000): Duplicate entry '1001' for key 'JOB_ID'



------------------------------------------------------------------------------------------------------------------
7. Write a SQL statement to insert rows into the table countries in which the value of country_id column will be unique and auto incremented.
Create the table countries.

CREATE TABLE IF NOT EXISTS countries ( 
COUNTRY_ID integer NOT NULL AUTO_INCREMENT PRIMARY KEY,
COUNTRY_NAME varchar(40) NOT NULL,
REGION_ID integer NOT NULL
);

Solution:

INSERT INTO countries(COUNTRY_NAME,REGION_ID) VALUES('India',185);

Here is the structure of the table:

mysql> SELECT * FROM countries;
+------------+--------------+-----------+
| COUNTRY_ID | COUNTRY_NAME | REGION_ID |
+------------+--------------+-----------+
|          1 | India        |       185 |
+------------+--------------+-----------+
1 row in set (0.00 sec)
INSERT INTO countries(COUNTRY_NAME,REGION_ID) VALUES('Japan',102);

Here is the structure of the table:

mysql> SELECT * FROM countries;
+------------+--------------+-----------+
| COUNTRY_ID | COUNTRY_NAME | REGION_ID |
+------------+--------------+-----------+
|          1 | India        |       185 |
|          2 | Japan        |       102 |
+------------+--------------+-----------+
2 rows in set (0.03 sec)
------------------------------------------------------------------------------------------------------------------




MySQL Update Table:


1. Write a SQL statement to change the email column of employees table with 'not available' for all employees.

UPDATE employees SET email='not available';

mysql> SELECT * FROM employees LIMIT 2;
+-------------+------------+-----------+---------------+--------------+------------+---------+----------+----------------+------------+---------------+
| EMPLOYEE_ID | FIRST_NAME | LAST_NAME | EMAIL         | PHONE_NUMBER | HIRE_DATE  | JOB_ID  | SALARY   | COMMISSION_PCT | MANAGER_ID | DEPARTMENT_ID |
+-------------+------------+-----------+---------------+--------------+------------+---------+----------+----------------+------------+---------------+
|         100 | Steven     | King      | not available | 515.123.4567 | 1987-06-17 | AD_PRES | 24000.00 |           0.00 |          0 |            90 |
|         101 | Neena      | Kochhar   | not available | 515.123.4568 | 1987-06-18 | AD_VP   | 17000.00 |           0.00 |        100 |            90 |
+-------------+------------+-----------+---------------+--------------+------------+---------+----------+----------------+------------+---------------+
2 rows in set (0.00 sec)



------------------------------------------------------------------------------------------------------------------
2. Write a SQL statement to change the email and commission_pct column of employees table with 'not available' and 0.10 for all employees.


UPDATE employees SET email='not available',
commission_pct=0.10;

mysql> SELECT * FROM employees LIMIT 2;
+-------------+------------+-----------+---------------+--------------+------------+---------+----------+----------------+------------+---------------+
| EMPLOYEE_ID | FIRST_NAME | LAST_NAME | EMAIL         | PHONE_NUMBER | HIRE_DATE  | JOB_ID  | SALARY   | COMMISSION_PCT | MANAGER_ID | DEPARTMENT_ID |
+-------------+------------+-----------+---------------+--------------+------------+---------+----------+----------------+------------+---------------+
|         100 | Steven     | King      | not available | 515.123.4567 | 1987-06-17 | AD_PRES | 24000.00 |           0.10 |          0 |            90 |
|         101 | Neena      | Kochhar   | not available | 515.123.4568 | 1987-06-18 | AD_VP   | 17000.00 |           0.10 |        100 |            90 |
+-------------+------------+-----------+---------------+--------------+------------+---------+----------+----------------+------------+---------------+
2 rows in set (0.00 sec) 


------------------------------------------------------------------------------------------------------------------
3. Write a SQL statement to change the email and commission_pct column of employees table with 'not available' and 0.10 for those employees whose department_id is 110.

UPDATE employees 
SET email='not available',
commission_pct=0.10 
WHERE department_id=110;

+-------------+------------+-----------+---------------+--------------+------------+------------+----------+----------------+------------+---------------+
| EMPLOYEE_ID | FIRST_NAME | LAST_NAME | EMAIL         | PHONE_NUMBER | HIRE_DATE  | JOB_ID     | SALARY   | COMMISSION_PCT | MANAGER_ID | DEPARTMENT_ID |
+-------------+------------+-----------+---------------+--------------+------------+------------+----------+----------------+------------+---------------+
|         205 | Shelley    | Higgins   | not available | 515.123.8080 | 1987-09-30 | AC_MGR     | 12000.00 |           0.10 |        101 |           110 |
|         206 | William    | Gietz     | not available | 515.123.8181 | 1987-10-01 | AC_ACCOUNT |  8300.00 |           0.10 |        205 |           110 |
+-------------+------------+-----------+---------------+--------------+------------+------------+----------+----------------+------------+---------------+
2 rows in set (0.00 sec)
------------------------------------------------------------------------------------------------------------------




MySQL Alter Table:


1. Write a SQL statement to rename the table countries to country_new.
Here is the list of tables.
+---------------+
| Tables_in_hrr |
+---------------+
| countries     |
| departments   |
| dup_countries |
| employees     |
| jobs          |
+---------------+
Solurtion:

ALTER TABLE countries RENAME country_new;

+---------------+
| Tables_in_hrr |
+---------------+
| country_new   |
| departments   |
| dup_countries |
| employees     |
| jobs          |
+---------------+



------------------------------------------------------------------------------------------------------------------
2. Write a SQL statement to add a column region_id to the table locations.
Here is the structure of the table locations.
mysql> SHOW COLUMNS FROM locations;
+----------------+--------------+------+-----+---------+-------+
| Field          | Type         | Null | Key | Default | Extra |
+----------------+--------------+------+-----+---------+-------+
| LOCATION_ID    | decimal(4,0) | YES  |     | NULL    |       |
| STREET_ADDRESS | varchar(40)  | YES  |     | NULL    |       |
| POSTAL_CODE    | varchar(12)  | YES  |     | NULL    |       |
| CITY           | varchar(30)  | YES  |     | NULL    |       |
| STATE_PROVINCE | varchar(25)  | YES  |     | NULL    |       |
| COUNTRY_ID     | varchar(2)   | YES  |     | NULL    |       |
+----------------+--------------+------+-----+---------+-------+
Solution:

ALTER TABLE locations
ADD region_id  INT;

mysql> SHOW COLUMNS FROM locations;
+----------------+--------------+------+-----+---------+-------+
| Field          | Type         | Null | Key | Default | Extra |
+----------------+--------------+------+-----+---------+-------+
| LOCATION_ID    | decimal(4,0) | YES  |     | NULL    |       |
| STREET_ADDRESS | varchar(40)  | YES  |     | NULL    |       |
| POSTAL_CODE    | varchar(12)  | YES  |     | NULL    |       |
| CITY           | varchar(30)  | YES  |     | NULL    |       |
| STATE_PROVINCE | varchar(25)  | YES  |     | NULL    |       |
| COUNTRY_ID     | varchar(2)   | YES  |     | NULL    |       |
| region_id      | int(11)      | YES  |     | NULL    |       |
+----------------+--------------+------+-----+---------+-------+



------------------------------------------------------------------------------------------------------------------
3. Write a SQL statement to add a columns ID as the first column of the table locations.
Here is the structure of the table locations.
mysql> SHOW COLUMNS FROM locations;
+----------------+--------------+------+-----+---------+-------+
| Field          | Type         | Null | Key | Default | Extra |
+----------------+--------------+------+-----+---------+-------+
| LOCATION_ID    | decimal(4,0) | YES  |     | NULL    |       |
| STREET_ADDRESS | varchar(40)  | YES  |     | NULL    |       |
| POSTAL_CODE    | varchar(12)  | YES  |     | NULL    |       |
| CITY           | varchar(30)  | YES  |     | NULL    |       |
| STATE_PROVINCE | varchar(25)  | YES  |     | NULL    |       |
| COUNTRY_ID     | varchar(2)   | YES  |     | NULL    |       |
+----------------+--------------+------+-----+---------+-------+
Solution:

ALTER TABLE locations
ADD ID  INT FIRST;

mysql> SHOW COLUMNS FROM locations;
+----------------+--------------+------+-----+---------+-------+
| Field          | Type         | Null | Key | Default | Extra |
+----------------+--------------+------+-----+---------+-------+
| ID             | int(11)      | YES  |     | NULL    |       |
| LOCATION_ID    | decimal(4,0) | YES  |     | NULL    |       |
| STREET_ADDRESS | varchar(40)  | YES  |     | NULL    |       |
| POSTAL_CODE    | varchar(12)  | YES  |     | NULL    |       |
| CITY           | varchar(30)  | YES  |     | NULL    |       |
| STATE_PROVINCE | varchar(25)  | YES  |     | NULL    |       |
| COUNTRY_ID     | varchar(2)   | YES  |     | NULL    |       |
+----------------+--------------+------+-----+---------+-------+



------------------------------------------------------------------------------------------------------------------
4. Write a SQL statement change the data type of the column country_id to integer in the table locations.
Here is the structure of the table locations.
mysql> SHOW COLUMNS FROM locations;
+----------------+--------------+------+-----+---------+-------+
| Field          | Type         | Null | Key | Default | Extra |
+----------------+--------------+------+-----+---------+-------+
| LOCATION_ID    | decimal(4,0) | YES  |     | NULL    |       |
| STREET_ADDRESS | varchar(40)  | YES  |     | NULL    |       |
| POSTAL_CODE    | varchar(12)  | YES  |     | NULL    |       |
| CITY           | varchar(30)  | YES  |     | NULL    |       |
| STATE_PROVINCE | varchar(25)  | YES  |     | NULL    |       |
| COUNTRY_ID     | varchar(2)   | YES  |     | NULL    |       |
+----------------+--------------+------+-----+---------+-------+
Solution:

ALTER TABLE locations
MODIFY country_id INT;

mysql> SHOW COLUMNS FROM locations;
+----------------+--------------+------+-----+---------+-------+
| Field          | Type         | Null | Key | Default | Extra |
+----------------+--------------+------+-----+---------+-------+
| LOCATION_ID    | decimal(4,0) | YES  |     | NULL    |       |
| STREET_ADDRESS | varchar(40)  | YES  |     | NULL    |       |
| POSTAL_CODE    | varchar(12)  | YES  |     | NULL    |       |
| CITY           | varchar(30)  | YES  |     | NULL    |       |
| STATE_PROVINCE | varchar(25)  | YES  |     | NULL    |       |
| country_id     | int(11)      | YES  |     | NULL    |       |
+----------------+--------------+------+-----+---------+-------+



------------------------------------------------------------------------------------------------------------------
5. Write a SQL statement to add a primary key for a combination of columns location_id and country_id.
Here is the structure of the table locations.
mysql> SHOW COLUMNS FROM locations;
+----------------+--------------+------+-----+---------+-------+
| Field          | Type         | Null | Key | Default | Extra |
+----------------+--------------+------+-----+---------+-------+
| LOCATION_ID    | decimal(4,0) | YES  |     | NULL    |       |
| STREET_ADDRESS | varchar(40)  | YES  |     | NULL    |       |
| POSTAL_CODE    | varchar(12)  | YES  |     | NULL    |       |
| CITY           | varchar(30)  | YES  |     | NULL    |       |
| STATE_PROVINCE | varchar(25)  | YES  |     | NULL    |       |
| COUNTRY_ID     | varchar(2)   | YES  |     | NULL    |       |
+----------------+--------------+------+-----+---------+-------+
Solution:

ALTER TABLE locations
ADD PRIMARY KEY(location_id,country_id);

mysql> SHOW COLUMNS FROM locations;
+----------------+--------------+------+-----+---------+-------+
| Field          | Type         | Null | Key | Default | Extra |
+----------------+--------------+------+-----+---------+-------+
| LOCATION_ID    | decimal(4,0) | NO   | PRI | 0       |       |
| STREET_ADDRESS | varchar(40)  | YES  |     | NULL    |       |
| POSTAL_CODE    | varchar(12)  | YES  |     | NULL    |       |
| CITY           | varchar(30)  | YES  |     | NULL    |       |
| STATE_PROVINCE | varchar(25)  | YES  |     | NULL    |       |
| COUNTRY_ID     | varchar(2)   | NO   | PRI |         |       |
+----------------+--------------+------+-----+---------+-------+
Here is the index file which have been created with creation of primary key.

+-----------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+
| Table     | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment |
+-----------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+
| locations |          0 | PRIMARY  |            1 | LOCATION_ID | A         |        NULL |     NULL | NULL   |      | BTREE      |         |
| locations |          0 | PRIMARY  |            2 | COUNTRY_ID  | A         |           0 |     NULL | NULL   |      | BTREE      |         |
+-----------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+



------------------------------------------------------------------------------------------------------------------
6. Write a SQL statement to drop the index indx_job_id from job_history table.
Here is the structure of the job_history and index file of the table job_history.
mysql> SHOW COLUMNS FROM job_history;
+---------------+---------+------+-----+---------+-------+
| Field         | Type    | Null | Key | Default | Extra |
+---------------+---------+------+-----+---------+-------+
| EMPLOYEE_ID   | int(11) | NO   | PRI | NULL    |       |
| START_DATE    | date    | YES  |     | NULL    |       |
| HIRE_DATE     | date    | YES  |     | NULL    |       |
| JOB_ID        | int(11) | NO   | MUL | NULL    |       |
| DEPARTMENT_ID | int(11) | NO   |     | NULL    |       |
+---------------+---------+------+-----+---------+-------+

mysql> SHOW INDEXES FROM job_history;
+-------------+------------+-------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+
| Table       | Non_unique | Key_name    | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment |
+-------------+------------+-------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+
| job_history |          0 | PRIMARY     |            1 | EMPLOYEE_ID | A         |           0 |     NULL | NULL   |      | BTREE      |         |
| job_history |          1 | indx_job_id |            1 | JOB_ID      | A         |           0 |     NULL | NULL   |      | BTREE      |         |
+-------------+------------+-------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+
Solution:

ALTER TABLE job_history
DROP INDEX indx_job_id;

mysql> SHOW COLUMNS FROM job_history;
+---------------+---------+------+-----+---------+-------+
| Field         | Type    | Null | Key | Default | Extra |
+---------------+---------+------+-----+---------+-------+
| EMPLOYEE_ID   | int(11) | NO   | PRI | NULL    |       |
| START_DATE    | date    | YES  |     | NULL    |       |
| HIRE_DATE     | date    | YES  |     | NULL    |       |
| JOB_ID        | int(11) | NO   |     | NULL    |       |
| DEPARTMENT_ID | int(11) | NO   |     | NULL    |       |
+---------------+---------+------+-----+---------+-------+
Now see the index file.

mysql> SHOW INDEXES FROM job_history;
+-------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+
| Table       | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment |
+-------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+
| job_history |          0 | PRIMARY  |            1 | EMPLOYEE_ID | A         |           0 |     NULL | NULL   |      | BTREE      |         |
+-------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+
------------------------------------------------------------------------------------------------------------------




Basic SELECT statement:


1. Write a query to display the names (first_name, last_name) using alias name "First Name", "Last Name".

SELECT first_name "First Name",  last_name "Last Name" 
FROM employees;


------------------------------------------------------------------------------------------------------------------
2. Write a query to get unique department ID from employee table.

SELECT DISTINCT department_id 
FROM employees;


------------------------------------------------------------------------------------------------------------------
3. Write a query to get the names (first_name, last_name), salary, PF of all the employees (PF is calculated as 15% of salary).

SELECT first_name, last_name, salary, salary*.15 PF 
FROM employees;


------------------------------------------------------------------------------------------------------------------
4. Write a query to get the first three characters of first name of all employees.

SELECT SUBSTRING(first_name,1,3) 
FROM employees;


------------------------------------------------------------------------------------------------------------------
5. Write a query to calculate 171*214+625.

SELECT 171*214+625 Result;


------------------------------------------------------------------------------------------------------------------
6. Write a query to select first 10 records from a table.

SELECT employee_id, first_name 
FROM employees  LIMIT 10;


------------------------------------------------------------------------------------------------------------------
7. Write a query to get monthly salary (round 2 decimal places) of all employees.

SELECT first_name, last_name, round(salary/12,2) as 'Monthly Salary' 
   FROM employees;
------------------------------------------------------------------------------------------------------------------




MySQL Restricting and Sorting data:


1. Write a query to display the names (first_name, last_name) and salary for all employees whose salary is not in the range $10,000 through $15,000.

SELECT first_name, last_name, salary
FROM employees
WHERE salary NOT BETWEEN 10000 AND 15000;


------------------------------------------------------------------------------------------------------------------
2. Write a query to display the name (first_name, last_name) and department ID of all employees in departments 30 or 100 in ascending order.

SELECT first_name, last_name, department_id
FROM employees
WHERE department_id IN (30, 100)
ORDER BY  department_id  ASC;


------------------------------------------------------------------------------------------------------------------
3. Write a query to display the first_name of all employees who have both "b" and "c" in their first name.

SELECT first_name
FROM employees
WHERE first_name LIKE '%b%'
AND first_name LIKE '%c%';


------------------------------------------------------------------------------------------------------------------
4. Write a query to select all records from employees where last name in 'JONES', 'BLAKE', 'SCOTT', 'KING' and 'FORD'.

SELECT * 
FROM employees 
WHERE last_name IN('JONES', 'BLAKE', 'SCOTT', 'KING', 'FORD');
------------------------------------------------------------------------------------------------------------------





Aggregate Functions and Group by:


1. Write a query to list the number of jobs available in the employees table.

SELECT COUNT(DISTINCT job_id) 
FROM employees;


------------------------------------------------------------------------------------------------------------------
2.Write a query to get the total salaries payable to employees.

SELECT SUM(salary) 
FROM employees;


------------------------------------------------------------------------------------------------------------------
3. Write a query to get the minimum/maximum salary from employees table.

SELECT MIN(salary) 
FROM employees;

SELECT MAX(salary) 
FROM employees;


------------------------------------------------------------------------------------------------------------------
4. Write a query to get the number of employees with the same job.

SELECT job_id, COUNT(*)
FROM employees
GROUP BY job_id;


------------------------------------------------------------------------------------------------------------------
5. Write a query to find the manager ID and the salary of the lowest-paid employee for that manager.

SELECT manager_id, MIN(salary)
FROM employees
WHERE manager_id IS NOT NULL
GROUP BY manager_id
ORDER BY MIN(salary) DESC;


------------------------------------------------------------------------------------------------------------------
6. Write a query to get the job ID and maximum salary of the employees where maximum salary is greater than or equal to $4000.

SELECT job_id, MAX(salary) 
FROM employees 
GROUP BY job_id 
HAVING MAX(salary) >=4000;



------------------------------------------------------------------------------------------------------------------
7. Write a query to get the average salary for all departments employing more than 10 employees.

SELECT department_id, AVG(salary), COUNT(*) 
FROM employees 
GROUP BY department_id
HAVING COUNT(*) > 10;
------------------------------------------------------------------------------------------------------------------




MySQL Joins:


1. Write a query to find the addresses (location_id, street_address, city, state_province, country_name) of all the departments.

SELECT location_id, street_address, city, state_province, country_name
FROM locations
NATURAL JOIN countries;


------------------------------------------------------------------------------------------------------------------
2. Write a query to find the name (first_name, last name), department ID and name of all the employees.

SELECT first_name, last_name, department_id, department_name 
FROM employees 
JOIN departments USING (department_id);


------------------------------------------------------------------------------------------------------------------
3. Write a query to get the department name and number of employees in the department.

SELECT department_name AS 'Department Name', 
COUNT(*) AS 'No of Employees' 
FROM departments 
INNER JOIN employees 
ON employees.department_id = departments.department_id 
GROUP BY departments.department_id, department_name 
ORDER BY department_name;


------------------------------------------------------------------------------------------------------------------
4. Write a query to find the employee ID, job title, number of days between ending date and starting date for all jobs in department 90 from job history.

SELECT employee_id, job_title, end_date-start_date Days FROM job_history 
NATURAL JOIN jobs 
WHERE department_id=90;


------------------------------------------------------------------------------------------------------------------
5. Write a query to display job title, employee name, and the difference between salary of the employee and minimum salary for the job.

SELECT job_title, first_name, salary-min_salary 'Salary - Min_Salary' 
FROM employees 
NATURAL JOIN jobs;


------------------------------------------------------------------------------------------------------------------
6. Write a query to display the job history that were done by any employee who is currently drawing more than 10000 of salary.

SELECT jh.* FROM job_history jh 
JOIN employees e 
ON (jh.employee_id = e.employee_id) 
WHERE salary > 10000;
------------------------------------------------------------------------------------------------------------------




Date and Time functions:


1. Write a query to display the first day of the month (in datetime format) three months before the current month.
Sample current date : 2014-09-03
Expected result : 2014-06-01

SELECT date(((PERIOD_ADD
(EXTRACT(YEAR_MONTH 
FROM CURDATE()),-3)*100)+1));


------------------------------------------------------------------------------------------------------------------
2. Write a query to display the last day of the month (in datetime format) three months before the current month.

SELECT (SUBDATE(ADDDATE
(CURDATE(),INTERVAL 1 MONTH),
INTERVAL DAYOFMONTH(CURDATE())DAY)) 
AS LastDayOfTheMonth;


------------------------------------------------------------------------------------------------------------------
3. Write a query to get the first day of the current year.

SELECT MAKEDATE(EXTRACT(YEAR FROM CURDATE()),1);


------------------------------------------------------------------------------------------------------------------
4. Write a query to get the current date in Thursday September 2014 format.
Sample date : 2014-09-04
Output : September 4, 2014

SELECT DATE_FORMAT(NOW(), '%W %M %Y');


------------------------------------------------------------------------------------------------------------------
5. Write a query to display the current date in the specified format.

SELECT date_format(CURDATE(),'%l:%i %p %b %e, %Y');


------------------------------------------------------------------------------------------------------------------
6. Write a query to get first name of employees who joined in 1987.

SELECT FIRST_NAME, HIRE_DATE
FROM employees
WHERE YEAR(HIRE_DATE)=1987;


------------------------------------------------------------------------------------------------------------------
7. Write a query to get the department ID, year, and number of employees joined.

SELECT DEPARTMENT_ID, DATE_FORMAT(HIRE_DATE,'%Y'), 
COUNT(EMPLOYEE_ID)  
FROM employees 
GROUP BY DEPARTMENT_ID, DATE_FORMAT(HIRE_DATE, '%Y') 
ORDER BY DEPARTMENT_ID;
------------------------------------------------------------------------------------------------------------------




MySQL string:


1. Write a query to get the job_id and related employee's id.

SELECT job_id, GROUP_CONCAT(employee_id, ' ')  'Employees ID' 
FROM employees GROUP BY job_id;


------------------------------------------------------------------------------------------------------------------
2. Write a query to update the portion of the phone_number in the employees table, within the phone number the substring '124' will be replaced by '999'.

UPDATE employees 
SET phone_number = REPLACE(phone_number, '124', '999') 
WHERE phone_number LIKE '%124%';


------------------------------------------------------------------------------------------------------------------
3.Write a query to append '@example.com' to email field.

UPDATE employees SET email = CONCAT(email, '@example.com');


------------------------------------------------------------------------------------------------------------------
4. Write a query to get the employee id, email id (discard the last three characters).

SELECT employee_id, REVERSE(SUBSTR(REVERSE(email), 4)) as Email_ID 
from employees;


------------------------------------------------------------------------------------------------------------------
5. Write a query to extract the last 4 character of phone numbers.

SELECT RIGHT(phone_number, 4) as 'Ph.No.' FROM employees;


------------------------------------------------------------------------------------------------------------------
6. Write a query to get the last word of the street address.

SELECT location_id, street_address, 
SUBSTRING_INDEX(REPLACE(REPLACE(REPLACE(street_address,',',' '),')',' '),'(',' '),' ',-1) 
AS 'Last--word-of-street_address' 
FROM locations;


------------------------------------------------------------------------------------------------------------------
7. Write a query that displays the first name and the length of the first name for all employees whose name starts with the letters 'A', 'J' or 'M'. Give each column an appropriate label. Sort the results by the employees' first names.

SELECT first_name "Name",
LENGTH(first_name) "Length"
FROM employees
WHERE first_name LIKE 'J%'
OR first_name LIKE 'M%'
OR first_name LIKE 'A%'
ORDER BY first_name ;


------------------------------------------------------------------------------------------------------------------
8. Write a query to display the employees with their code, first name, last name and hire date who hired either on seventh day of any month or seventh month in any year.

SELECT employee_id,first_name,last_name,hire_date 
FROM employees 
WHERE POSITION("07" IN DATE_FORMAT(hire_date, '%d %m %Y'))>0;
