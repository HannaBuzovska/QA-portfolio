1.  CREATE TABLE query
CREATE TABLE is a keyword that will create a new, initially empty table in the database. The table will be owned by the user who has issued this command.

    
      postgres=# create table dummy_table(name varchar(20),address text,age int);
      CREATE TABLE
    
  
2.  INSERT query
The INSERT command is used to insert data into a table:

    
        postgres=# insert into dummy_table values('XYZ','location-A',25);
        INSERT 0 1
        postgres=# insert into dummy_table values('ABC','location-B',35);
        INSERT 0 1
        postgres=# insert into dummy_table values('DEF','location-C',40);
        INSERT 0 1
        postgres=# insert into dummy_table values('PQR','location-D',54);
        INSERT 0 1
    
  
3.  SELECT query without WHERE condition
The SELECT command (when used without the optional WHERE condition) is used to fetch all data from a database table:

      
        postgres=# select * from dummy_table;
        name |  address   | age 
        ---------+--------------+ -----
        XYZ   | location-A |  25
        ABC   | location-B |  35
        DEF   | location-C |  40
        PQR   | location-D |  54
        (4 rows)
      
    
4.  UPDATE query
UPDATE is used to make updates to the data or row(s) of a database table. In the example below we use UPDATE to change the age of a person whose name is ‘PQR’:

      
        postgres=# update dummy_table set age=50 where name='PQR';
        UPDATE 1
        postgres=# select * from dummy_table;
        name |  address   | age 
        --------+--------------+-------
        XYZ  | location-A |  25
        ABC  | location-B |  35
        DEF  | location-C |  40
        PQR  | location-D |  50
        (4 rows)
      
    
Next, I’ll use the UPDATE command to change the name and age of a person whose address is ‘location-D’:

      
postgres=# update dummy_table set name='GHI',age=54 where address='location-D';
UPDATE 1
postgres=# select * from dummy_table;
 name |  address   | age 
------+------------+-----
 XYZ  | location-A |  25
 ABC  | location-B |  35
 DEF  | location-C |  40
 GHI  | location-D |  54
(4 rows)

postgres=# 


If I want to modify all the values in the address and age columns in dummy_table, then I do not need to use the WHERE clause. The UPDATE query would look like this:


postgres=# update dummy_table set age=54,address='location-X';
UPDATE 4


postgres=# select * from dummy_table ;
 name |  address   | age 
------+------------+--------
 XYZ  | location-X |  54
 ABC  | location-X |  54
 DEF  | location-X |  54
 GHI  | location-X |  54
(4 rows)

postgres=# 

A RETURNING clause returns the updated rows. This is optional in UPDATE:


postgres=# update dummy_table set age=30 where name='XYZ' returning age as age_no;
 age_no 
---------
      30
(1 row)

UPDATE 1

It is always recommended to perform such operations under transaction blocks (i.e., BEGIN...COMMIT/ROLLBACK;), so we have the option to roll back the operation.

 

5.  DELETE query
The DELETE command is used to delete row(s). It can be used with or without the optional WHERE condition, but take note: if the WHERE condition is missing, the command will delete all rows, leaving you with an empty table.

In this example, I am deleting one row whose age column has the value 65:


postgres=# delete from dummy_table where age=65;
DELETE 1
postgres=# 

6.  Comparison Operators
In PostgreSQL, with the help of comparison operators I can find results where the value in a column is not equal to the specified condition or value.

Less than or equal to query:
  
postgres=# select * from dummy_table where age <=50;
 name |  address   | age 
------+------------+-----
 XYZ  | location-A |  25
 ABC  | location-B |  35
 DEF  | location-C |  40
 PQR  | location-D |  50
(4 rows)

Greater than or equal to query:

postgres=# select * from dummy_table where age>=50;
 name |  address   | age 
------+------------+-----
 PQR  | location-D |  50
(1 row)

Not equal to query:

postgres=# select * from dummy_table where age<>50;
 name |  address   | age 
------+------------+-----
 XYZ  | location-A |  25
 ABC  | location-B |  35
 DEF  | location-C |  40
(3 rows)

Equal to query:

postgres=# select * from dummy_table where age=50;
 name |  address   | age 
------+------------+-----
 PQR  | location-D |  50
(1 row)

7.  SELECT DISTINCT query
The SELECT DISTINCT statement is used to return only distinct values from the table. It removes any duplicate values.

SELECT query without DISTINCT clause

postgres=# select age from dummy_table order by 1;
 age 
-----
   1
   1
   2
   2
   3
(5 rows)

SELECT query with DISTINCT clause

postgres=# select distinct age from dummy_table order by 1;
 age 
-----
   1
   2
   3
(3 rows)

8.  TRUNCATE query
The TRUNCATE command is used to empty a table:


postgres=# truncate table dummy_table;
TRUNCATE TABLE

9.  DROP TABLE query
This DROP TABLE command is used to drop a table from the database:

postgresql=# drop table if exists dummy;
NOTICE:  table "dummy" does not exist, skipping
DROP TABLE

This command has removed the full table, including any associated data, indexes, rules, triggers, and constraints for that table.

10.  CREATE VIEW query
The CREATE VIEW command is used to generate views. Views are pseudo-tables, which are used to present a full table, subset, or select columns from the underlying table:

      
postgres=# create or replace view vi as select * from dummy_table where age is NULL;
CREATE VIEW

11.  Create a table using the SELECT statement
Using the syntax in the example below, we can create a table using a SELECT statement:

      
postgres=# select 'My name  is X' as col1 , 10 as col2, 'Address is -XYZ location' as col3  into new_table;
SELECT 1
postgres=# select * from new_table ;
     col1      | col2 |           col3           
---------------+------+--------------------------
 My name  is X |   10 | Address is -XYZ location
(1 row)
       
      
12.  Query timeout
      
postgresql=# set statement_timeout=10;
SET
postgresql=# select pg_sleep(20);
ERROR:  canceling statement due to statement timeout
       
      
13.  Using CREATE SEQUENCE with the INSERT query

postgres=# create sequence seq;
CREATE SEQUENCE
postgres=# create table tab(n int);
CREATE TABLE
postgres=# insert into tab values (nextval('seq'));
INSERT 0 1
postgres=# insert into tab values (currval('seq'));
INSERT 0 1
postgres=# insert into tab values (nextval('seq'));
INSERT 0 1
postgres=# select * from tab;
 n 
---
 1
 1
 2
(3 rows)

14.  Importing BLOB data types
PostgreSQL doesn’t directly support BLOBs (binary large objects), but users can work with them using the following methods:

Let's assume you have an image (in png format) downloaded in the /home/edb/ folder:


[edb@localhost]$ ls /home/edb/mypic.png 
/home/edb/mypic.png

We want to store this image in the PostgreSQL database.

Go to the bin folder of your PostgreSQL installation and connect to the psql terminal:


postgres=# Create table testing(n int,n1 oid);
CREATE TABLE
postgres=# insert into testing values (1,lo_import('/home/edb/mypic.png'));
INSERT 0 1

The lo_import() function loads the named file into pg_largeobject and returns an OID (object identifier) value that will refer to the large object. Selecting the testing table will show just the OID and not the bits that have made up this photo.

 

15.  ILIKE query
The ILIKE operator is a matching function similar to the LIKE operator, but with the advantage that it matches valus case-insensitively.


postgres=# select * from ted;
  n  
-----
 TAR
 TaR
 Tar
 tar
(4 rows)

Using ILIKE in a WHERE condition

postgres=# select * from ted where n ilike 'TAR%';
  n  
-----
 TAR
 TaR
 Tar
 tar
(4 rows)

16.  Hierarchical queries
Hierarchical queries are ones where the results have a structured or parent-child relationship and are displayed in a tree structure. To see how hierarchical queries work, create a dummy table:


create table test_table(  
  emp_no                int,  
  ename                 char(5),  
  job                       char(9),  
  manager_no        int
);

Insert data into ‘test_table’:


insert into test_table values(10,'A1','CEO',null);
insert into test_table values(11, 'B1', 'VP', 10);
insert into test_table values(12, 'B2', 'VP', 10);
insert into test_table values(13, 'B3', 'VP', 10);
insert into test_table values(14, 'C1', 'DIRECTOR', 13);
insert into test_table values(15, ‘C2’, ‘DIRECTOR’, 13);
insert into test_table values(16, 'D1', 'MANAGER', 15);
insert into test_table values(17 ,'E1', 'ENGINEER', 11);
insert into test_table values(18, 'E2', 'ENGINEER', 11);

We can perform hierarchical queries on this table using the methods below.

 

17.  Length function
The length function returns the number of characters or number of bytes in a specified string variable.

Basic SELECT query

postgres=# select name,age from dummy_table;
 name | age 
------+-----
 XYZ  |  25
 ABC  |  35
 DEF  |  40
 PQR  |  54
 PQR  |    
(5 rows)

Query with length function for column name and age

postgres=# select length(name),length(age) from dummy_table;
 length | length 
--------+--------
      3 |      2
      3 |      2
      3 |      2
      3 |      2
      3 |       
(5 rows)

18.  When a query has no destination for result data
Say that while selecting a given function, we receive the error message below:


postgresql=# create or replace function f(n int) 
returns int 
as 
$$ 
begin 
select now();
return 1;
 end; 
$$ language 'plpgsql';
CREATE FUNCTION
postgres=# select f(9);
ERROR:  query has no destination for result data
HINT:  If you want to discard the results of a SELECT, use PERFORM instead.

To avoid such errors, we can either use PERFORM or declare a variable and use it in a SELECT INTO statement:

Using PERFORM

postgres=# create or replace function f(n int) 
returns int 
as 
$$ 
begin 
perform
now(); 
 return 1; 
 end; 
$$ language 'plpgsql';
CREATE FUNCTION
postgresql=# select f(9);
 f 
---
 1
(1 row)

Declaring a variable and using it in a SELECT INTO statement

postgres=# create or replace function f(n int) 
returns int 
as 
$$ 
declare 
a date;
begin 
select now() into a;
raise notice ‘%s’,a; 
return 1; 
end; 
$$ language 'plpgsql';
CREATE FUNCTION
 
 
postgresql=# select f(9);
          NOTICE: 24-SEP-20 13:15:46.23388s
             f
            ---
            1
        (1 row)

19.  Exporting query result to a text file
With the help of the COPY command, we can export data from a table to an outside text file as well as import data from a text file into a table.

Exporting data from a table to a text file

postgres=#  copy dummy_table to '/tmp/abc.txt';
COPY 5
  
postgres=# \! cat /tmp/abc.txt
XYZ	location-A	25
ABC	location-B	35
DEF	location-C	40
PQR	location-D	50
CXC	1	50

Importing data from a text file into a table

postgres=# copy dummy_table from '/tmp/abc.txt';
COPY 5

With the help of common table expressions (CTE):

postgres=#WITH RECURSIVE cte AS (                                                                                                                                                          SELECT emp_no, ename, manager_no, 1 AS level                                                                                                                                             FROM   test_table                                                                                                                                                                      where manager_no is null                                                                                                                                                            UNION  ALL                                                                                                                                                                               SELECT e.emp_no, e.ename, e.manager_no, c.level + 1                                                                                                                                      FROM   cte c                                                                                                                                                                             JOIN   test_table e ON e.manager_no = c.emp_no                                                                                  )                                                                                                                                                                                     SELECT *                                                                                                                                                                                 FROM   cte;

emp_no | ename | manager_no | level 
-----------+----------+------------------+-------
     10    | A1        |                        |     1
     11    | B1        |          10          |     2
     12    | B2        |          10          |     2
     13    | B3        |          10          |     2
     14    | C1        |         13           |     3
     17    | E1        |          11          |      3
     18    | E2        |          11           |     3
     15    | C2        |          13           |     3
     16    | D1        |          15           |     4
(9 rows)

postgres=# 

Using the tablefunc extension:
The tablefunc extension is a contrib module that resides in the contrib/ folder in PostgreSQL sources.

First, create the tablefunc extension:


postgres=# CREATE EXTENSION tablefunc;

CREATE EXTENSION

postgres=# 

Then, use tablefunc’s connectby function to display results hierarchically:


postgres=# SELECT * FROM connectby('dummy_table', 'emp_no', 'manager_no', '10', 0, '->') AS t(emp_no int, manager_no int, level int, ord text) order by emp_no;

 emp_no | manager_no | level |      ord       

--------+------------+-------+----------------

     10 |                       |      0        | 10

     11 |              10     |      1        | 10->11

     12 |              10     |      1        | 10->12

     13 |              10     |      1        | 10->13

     14 |              13     |      2        | 10->13->14

     15 |              13     |      2        | 10->13->15

     16 |              15     |      3        | 10->13->15->16

     17 |              11     |      2        | 10->11->17

     18 |              11     |      2        | 10->11->18

(9 rows)


postgres=# 

20.  Listing databases query
The following query can be used to show all the databases created:


postgres=# select oid,datname from pg_database;
  oid     |  datname  
-----------+-----------
 13743 | postgres
     1     | template1
 13742 | template0
(3 rows) 

We can also list out all the database names using the \l command at the psql prompt.

 

21.  Checking query execution time
We can check the time needed for a query to execute by enabling \timing at the psql prompt:


postgres=# \timing
Timing is on.

The SELECT query will now show the execution time:


postgres=# select * from dummy_table;
 name |  address   | age 
------+------------+--------
 XYZ  | location-A | 25
 ABC  | location-B | 35
 DEF  | location-C | 40
 PQR  | location-D | 50
 CXC  | 1               | 50
(5 rows)
 
Time: 0.440 ms
postgres=# 

22.  Dynamic SQL query
Dynamic SQL is used to reduce repetitive tasks when it comes to querying.
Dynamic SQL queries are not cached in memory.


postgres=# do
postgres-# $$
postgres$# begin
postgres$# execute 'select * from dummy_table';
postgres$# end;
postgres$# $$;
DO

23.  COUNT query
The COUNT query returns the number of rows in a table. If we use (*) this will include null values; otherwise null values will be excluded.


postgres=# select count(*) from dummy_table;
 count 
-------
     5
(1 row)
 
postgres=# select count(avg) from dummy_table;
 count 
-------
     4
(1 row)

24.  LIMIT and OFFSET query
The LIMIT clause is used to limit the data amount returned by the SELECT statement. The query below will display only 1 row:


postgres=# select * from dummy_table  limit 1;
 name |  address   | age 
------+------------+-----
 XYZ  | location-A |  25
(1 row)

OFFSET is used when we want to skip a particular number of rows:


postgres=# select * from dummy_table  offset 4;
 name | address | age 
------+---------+-----
 cxc  | 1       |  50
(1 row)

25.  IF … ELSE expression
We can use conditional statements like IF ... ELSE in an anonymous block. The example below checks if the values of variables abc and xyz are matching and prints the result— i.e., 150:


postgres=# Do 
             $$
             Declare
              abc int;
              xyz int;
              begin
              abc:=100;
              xyz:=abc;
              if abc=xyz then 
               xyz=150;  
              raise notice '%',xyz;
             else
             end if;               
             end;
               $$
;
NOTICE:  150
DO

26.  UPDATE with JOIN query
We can use UPDATE with a JOIN and WHERE clause when we want to update the values from one table (table X) based on values from another table (table Y):


postgres=# create table X(n int, n1 char(10));
CREATE TABLE
postgres=# insert into X values (1,'abc');
INSERT 0 1
postgres=# insert into X values (2,'xyz');
INSERT 0 1
postgres=# insert into X values (3,'pqr');
INSERT 0 1

postgres=# create table Y(n int, n1 char(10));
CREATE TABLE

postgres=# insert into Y values (1,'');
INSERT 0 1
postgres=# insert into Y values (2,'');
INSERT 0 1

postgres=# insert into Y values (5,'axyz');
INSERT 0 1

postgres=# update Y set n1=X.n1 from X  where X.n=Y.n;
UPDATE 2
postgres=# select * from Y;
 n |     n1     
---+------------
 5 | axyz      
 1 | abc       
 2 | xyz       
(3 rows)

postgres=# 

27.  INNER JOIN query
The INNER JOIN command will find rows from two (or more) tables where the specified columns data in the tables match:



postgres=# select *  from x inner join  y on  x.n1 = y.n1;
 n |     n1     | n |     n1     
---+------------+---+------------
 1 | abc        | 1 | abc       
 2 | xyz        | 2 | xyz       
(2 rows)

postgres=# 
 

28.  CASE expression
The CASE expression is a generic conditional expression, similar to the IF … ELSE statement.


postgres=# SELECT age,
       CASE age WHEN 25 THEN 'one'
              WHEN 50 THEN 'two'
              ELSE 'other'
       END
    FROM  dummy_table;
 age | case  
-----+-------
  25 | one
  35 | other
  40 | other
  50 | two
  50 | two
(5 rows)

29.  PostgreSQL recursive query
Recursive queries are used to deal with hierarchical queries or tree-structured data. The structure of a WITH RECURSIVE query is always:     a)   Non-recursive term
    b)   UNION (or UNION ALL), then a recursive term

where the recursive term includes a reference to the query's output.


CREATE TABLE emp_test (
  id int,
  ename varchar(255),
  emanager int
);

INSERT INTO emp_test VALUES (1, 'abc', null);
INSERT INTO emp_test VALUES (2, 'xyz', 1);
INSERT INTO emp_test VALUES (3, 'def', 2);
INSERT INTO emp_test VALUES (4, 'cde', 1);
INSERT INTO emp_test VALUES (5, 'qrs', 2);
INSERT INTO emp_test VALUES (9, 'iop', 3);
INSERT INTO emp_test VALUES (10, 'klm', 4);

The recursive query below will give all the reports in a certain order:


postgres=#WITH RECURSIVE emp_testnew  AS (
  SELECT id, ename, emanager
  FROM emp_test
  WHERE id = 2
  UNION ALL
  SELECT e.id, e.ename, e.emanager
  FROM emp_test e
  INNER JOIN emp_testnew e1 ON e1.id = e.emanager
)
SELECT *
FROM emp_testnew;

 id | ename | emanager 
----+-------+----------
  2 | xyz   |        1
  3 | def   |        2
  5 | qrs   |        2
  9 | iop   |        3
(4 rows)

postgres=# 

30.  PostgreSQL log queries
Using the pg_stat_statements module, we can track execution statistics for all SQL statements. To do this, we need to create an extension and add in shared_preload_libraries inside the postgresql.conf file:

postgres=# create extension pg_stat_statements;
CREATE EXTENSION


postgres=# show shared_preload_libraries ;
                           shared_preload_libraries                           
-------------------------------------------------
 $libdir/pg_stat_statements
(1 row)


postgres=# select query from pg_stat_statements where query like 'create table%';
-[ RECORD 1 ]-------------------
query | create table test(n int)

We can also configure PostgreSQL to generate log output by enabling these parameters in the postgresql.conf file:


logging_collector = on
log_directory = 'log'
log_filename = ‘postgresql-%Y-%m-%d_%H%M%S.log'
log_destination = ‘stderr’
Log file will be created under the pg_log directory which resides under the data folder. 

[centos@tushar-ldap-docker bin]$ ls  data/log
postgresql-2020-09-17_150932.log  postgresql-2020-09-19_000000.log  
[centos@tushar-ldap-docker bin]$ 

Queries will be recorded in these files.

31.  Using a variable
We can declare a variable in PostgreSQL at the psql prompt:


postgres=# \set cond 50

Using a variable in a WHERE condition

postgres=# select * from dummy_table where age=:cond;
 name |  address   | age 
------+------------+-----
 PQR  | location-D |  50
(1 row)

OR


postgres=# \set cond 50
postgres=# select :cond+100 ;
 ?column? 
----------
      150
(1 row)

32.  Date query
PostgreSQL offers functions for date and time that can be used in queries.


postgres=# select now();
               now                
----------------------------------
 22-SEP-20 03:08:42.636385 +05:30
(1 row)

postgres=# select current_date;
 current_date 
--------------
 22-SEP-20
(1 row)

postgres=# select current_time;
     current_time      
-----------------------
 03:08:53.648466+05:30
(1 row)

We can also perform a date range query to find rows with values between two time stamps:


postgres=# create table datetable(n int,n1 date);
CREATE TABLE

postgres=# insert into datetable values (1,'12-01-1980');
INSERT 0 1
postgres=# insert into datetable values (2,'12-01-2020');
INSERT 0 1
postgres=# insert into datetable values (3,'12-01-2000');
INSERT 0 1
postgres=# select * from datetable where n1 between '12-01-1980' and '12-01-2000';
 n |         n1         
---+--------------------
 1 | 12-JAN-80 00:00:00
 3 | 12-JAN-00 00:00:00
(2 rows)

33.  PostgreSQL function RETURN QUERY result
When a PL/pgSQL function is declared to return a SETOF some data type, the return is specified by a RETURN QUERY command:


postgres=# CREATE FUNCTION get(int) RETURNS SETOF integer AS
$BODY$
BEGIN
    RETURN QUERY SELECT age
                   FROM dummy_table
                  WHERE age >= $1  ;
    RETURN;
 END
$BODY$
LANGUAGE plpgsql;


postgres=# select * from get(9);
 get 
-----
  25
  35
  40
  50
(4 rows)
